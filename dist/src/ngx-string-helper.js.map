{"version":3,"sources":["../../src/ngx-string-helper.ts"],"names":[],"mappings":"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","file":"ngx-string-helper.js","sourceRoot":"","sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\n\r\n\r\nexport class NgxStrHelper {\r\n\r\n    private escapeChars = {\r\n        '¢': 'cent',\r\n        '£': 'pound',\r\n        '¥': 'yen',\r\n        '€': 'euro',\r\n        '©': 'copy',\r\n        '®': 'reg',\r\n        '<': 'lt',\r\n        '>': 'gt',\r\n        '\"': 'quot',\r\n        '&': 'amp',\r\n        '\\'': '#39'\r\n    };\r\n\r\n    public constructor() { }\r\n\r\n    isNullOrEmpty(input: any) {\r\n        return (input === undefined || input === null || input === \"\");\r\n    }\r\n\r\n    truncate(str: string, len: number) {\r\n        return str.substring(0, len) + '...';\r\n    }\r\n\r\n    contains(str: string, findStr: string) {\r\n        return str.indexOf(findStr) >= 0;\r\n    }\r\n\r\n    toSlug(str: string) {\r\n        return str\r\n            .toLowerCase()\r\n            .replace(/ /g, '-')\r\n            .replace(/[^\\w-]+/g, '');\r\n    }\r\n\r\n    decapitalize(str: string) {\r\n        return str.charAt(0).toLowerCase() + str.slice(1);\r\n    }\r\n\r\n    capitalize(str: string, lowercaseRest: boolean) {\r\n        var remainingChars = !lowercaseRest ? str.slice(1) : str.slice(1).toLowerCase();\r\n\r\n        return str.charAt(0).toUpperCase() + remainingChars;\r\n    }\r\n\r\n    clean(str: string) {\r\n        return str.trim().replace(/\\s\\s+/g, ' ');\r\n    }\r\n\r\n    chars(str: string) {\r\n        return str.split('');\r\n    }\r\n\r\n    swapCase(str: string) {\r\n        return str.replace(/\\S/g, function (c) {\r\n            return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();\r\n        });\r\n    }\r\n\r\n    include(str: string, needle: string) {\r\n        if (needle === '') return true;\r\n        return str.indexOf(needle) !== -1;\r\n    }\r\n\r\n    count(str: string, substr: string) {\r\n        if (str.length === 0 || substr.length === 0) return 0;\r\n        return str.split(substr).length - 1;\r\n    }\r\n\r\n    escapeHTML(str: string) {\r\n        let regexString = '[';\r\n        for (let key in this.escapeChars) {\r\n            regexString += key;\r\n        }\r\n        regexString += ']';\r\n        let regex = new RegExp(regexString, 'g');\r\n        return str.replace(regex, function (m) {\r\n            return '&' + this.escapeChars[m] + ';';\r\n        });\r\n    }\r\n\r\n    insert(str: string, i: number, substr: string) {\r\n        return this.splice(str, i, 0, substr);\r\n    }\r\n\r\n    splice(str: string, i: number, howmany: number, substr: string) {\r\n        let arr = this.chars(str);\r\n        arr.splice(~~i, ~~howmany, substr);\r\n        return arr.join('');\r\n    }\r\n\r\n    replaceAll(str: string, find: string, replace: string, ignorecase: boolean) {\r\n        let flags = (ignorecase === true) ? 'gi' : 'g';\r\n        let reg = new RegExp(find, flags);\r\n        return str.replace(reg, replace);\r\n    }\r\n\r\n    isBlank(str: string) {\r\n        return (/^\\s*$/).test(str);\r\n    }\r\n\r\n    reverse(str: string) {\r\n        return this.chars(str).reverse().join('');\r\n    }\r\n\r\n    startsWith(str: string, starts: string, position: number) {\r\n        starts = '' + starts;\r\n        position = position == null ? 0 : Math.min(this.toPositive(position), str.length);\r\n        return str.lastIndexOf(starts, position) === position;\r\n    }\r\n\r\n    endsWith(str: string, ends: string, position: number) {\r\n        ends = '' + ends;\r\n        if (typeof position == 'undefined') {\r\n            position = str.length - ends.length;\r\n        } else {\r\n            position = Math.min(this.toPositive(position), str.length) - ends.length;\r\n        }\r\n        return position >= 0 && str.indexOf(ends, position) === position;\r\n    }\r\n\r\n    toPositive(num: number) {\r\n        return num < 0 ? 0 : (+num || 0);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}