{"version":3,"sources":["../../src/ngx-string-helper.ts"],"names":[],"mappings":"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","file":"ngx-string-helper.js","sourceRoot":"","sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\n\r\n\r\nexport class NgxStrHelper {\r\n\r\n    private escapeChars = {\r\n        '¢': 'cent',\r\n        '£': 'pound',\r\n        '¥': 'yen',\r\n        '€': 'euro',\r\n        '©': 'copy',\r\n        '®': 'reg',\r\n        '<': 'lt',\r\n        '>': 'gt',\r\n        '\"': 'quot',\r\n        '&': 'amp',\r\n        '\\'': '#39'\r\n    };\r\n\r\n    public constructor() { }\r\n\r\n    /**\r\n     * @param input any\r\n     * Input: \"Input is a string\" ==> false\r\n     * Input: \"\" ==> true\r\n     */\r\n    isNullOrEmpty(input: any) {\r\n        return (input === undefined || input === null || input === \"\");\r\n    }\r\n\r\n    /**\r\n     * @param str: string, len: number\r\n     * Input: \"Input is a string test\";\r\n     * Output: \"Input is a...\"\r\n     */\r\n    truncate(str: string, len: number) {\r\n        return str.substring(0, len) + '...';\r\n    }\r\n\r\n    /**\r\n     * Searches for a given substring\r\n     * @param str: string, finStr: string\r\n     * Input: (\"Test is a string\", \"is\")\r\n     * Output: True\r\n     */\r\n    contains(str: string, findStr: string) {\r\n        return str.indexOf(findStr) >= 0;\r\n    }\r\n\r\n    /**\r\n     * @param str : string\r\n     * Input: \"Input is a string\" ==> \"input-is-a-string\"\r\n     */\r\n    toSlug(str: string) {\r\n        return str\r\n            .toLowerCase()\r\n            .replace(/ /g, '-')\r\n            .replace(/[^\\w-]+/g, '');\r\n    }\r\n\r\n    /**\r\n     * @param str string\r\n     * Input: \"Foo Bar\" ==> \"foo Bar\"\r\n     */\r\n    decapitalize(str: string) {\r\n        return str.charAt(0).toLowerCase() + str.slice(1);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param str string\r\n     * @param lowercaseRest : boolean, (optional)\r\n     * Input: \"foo Bar\" ==> \"Foo Bar\"\r\n     * Input: \"FOO Bar\" ==> \"Foo Bar\"\r\n     */\r\n    capitalize(str: string, lowercaseRest?: boolean) {\r\n        var remainingChars = !lowercaseRest ? str.slice(1) : str.slice(1).toLowerCase();\r\n\r\n        return str.charAt(0).toUpperCase() + remainingChars;\r\n    }\r\n\r\n    /**\r\n     * @param str string\r\n     * Input: \" foo    bar   \" ==> \"foo bar\"\r\n     */\r\n    clean(str: string) {\r\n        return str.trim().replace(/\\s\\s+/g, ' ');\r\n    }\r\n\r\n    /**\r\n     * @param str string\r\n     * Input: \"Hello\" ==> [\"H\", \"e\", \"l\", \"l\", \"o\"]\r\n     */\r\n    chars(str: string) {\r\n        return str.split('');\r\n    }\r\n\r\n    /**\r\n     * Returns a copy of the string in which all the case-based characters have had their case swapped.\r\n     * @param str string\r\n     * Input: \"hELLO\" ==> \"Hello\"\r\n     */\r\n    swapCase(str: string) {\r\n        return str.replace(/\\S/g, function (c) {\r\n            return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Tests if string contains a substring.\r\n     * @param str : string\r\n     * @param needle : string\r\n     * Input: include(\"foobar\", \"ob\") ==> true\r\n     */\r\n    include(str: string, needle: string) {\r\n        if (needle === '') return true;\r\n        return str.indexOf(needle) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Returns number of occurrences of substring in string.\r\n     * @param str : string\r\n     * @param substr : string\r\n     * Input: count(\"Hello world\", \"l\") ==> 3\r\n     */\r\n    count(str: string, substr: string) {\r\n        if (str.length === 0 || substr.length === 0) return 0;\r\n        return str.split(substr).length - 1;\r\n    }\r\n\r\n    /**\r\n     * Converts HTML special characters to their entity equivalents. This function supports cent, yen, euro, pound, lt, gt, copy, reg, quote, amp, apos.\r\n     * @param str : string\r\n     * Input: escapeHTML(\"<div>Blah blah blah</div>\") ==> \"&lt;div&gt;Blah blah blah&lt;/div&gt;\"\r\n     */\r\n    escapeHTML(str: string) {\r\n        let regexString = '[';\r\n        for (let key in this.escapeChars) {\r\n            regexString += key;\r\n        }\r\n        regexString += ']';\r\n        let regex = new RegExp(regexString, 'g');\r\n        return str.replace(regex, function (m) {\r\n            return '&' + this.escapeChars[m] + ';';\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts entity characters to HTML equivalents. This function supports cent, yen, euro, pound, lt, gt, copy, reg, quote, amp, apos, nbsp.\r\n     * @param str : string\r\n     * Input: unescapeHTML(\"&lt;div&gt;Blah&nbsp;blah blah&lt;/div&gt;\") ==> \"<div>Blah blah blah</div>\"\r\n     */\r\n    unescapeHTML(str: string) {\r\n        let htmlEntities: any = {\r\n            nbsp: ' ',\r\n            cent: '¢',\r\n            pound: '£',\r\n            yen: '¥',\r\n            euro: '€',\r\n            copy: '©',\r\n            reg: '®',\r\n            lt: '<',\r\n            gt: '>',\r\n            quot: '\"',\r\n            amp: '&',\r\n            apos: '\\''\r\n        };\r\n        return str.replace(/\\&([^;]+);/g, function (entity, entityCode) {\r\n            let match;\r\n\r\n            if (entityCode in htmlEntities) {\r\n                return htmlEntities[entityCode];\r\n                /*eslint no-cond-assign: 0*/\r\n            } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {\r\n                return String.fromCharCode(parseInt(match[1], 16));\r\n                /*eslint no-cond-assign: 0*/\r\n            } else if (match = entityCode.match(/^#(\\d+)$/)) {\r\n                return String.fromCharCode(~~match[1]);\r\n            } else {\r\n                return entity;\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @param str : string\r\n     * @param i : number // Index\r\n     * @param substr : string\r\n     * Input: insert(\"Hellworld\", 4, \"o \") ==> \"Hello world\"\r\n     */\r\n    insert(str: string, i: number, substr: string) {\r\n        return this.splice(str, i, 0, substr);\r\n    }\r\n\r\n    /**\r\n     * Like an array splice.\r\n     * @param str : string\r\n     * @param i : number // Index\r\n     * @param howmany : number // Number character\r\n     * @param substr : string // String replace\r\n     * Input: splice(\"https://github.com/test/ngx-string-helper\", 19, 4, \"thuyetngx\");\r\n     * Outputs: \"https://github.com/thuyetngx/ngx-string-helper\"\r\n     */\r\n    splice(str: string, i: number, howmany: number, substr: string) {\r\n        let arr = this.chars(str);\r\n        arr.splice(~~i, ~~howmany, substr);\r\n        return arr.join('');\r\n    }\r\n\r\n    /**\r\n     * @param str : string\r\n     * @param find : string\r\n     * @param replace : string\r\n     * @param ignorecase : boolean\r\n     * Input: replaceAll(\"foo\", \"o\", \"a\"); ==> \"faa\"\r\n     */\r\n    replaceAll(str: string, find: string, replace: string, ignorecase: boolean) {\r\n        let flags = (ignorecase === true) ? 'gi' : 'g';\r\n        let reg = new RegExp(find, flags);\r\n        return str.replace(reg, replace);\r\n    }\r\n\r\n    /**\r\n     * @param str : string\r\n     * isBlank(\"\"); // => true\r\n     * isBlank(\"\\n\"); // => true\r\n     * isBlank(\" \"); // => true\r\n     * isBlank(\"a\"); // => false\r\n     */\r\n    isBlank(str: string) {\r\n        return (/^\\s*$/).test(str);\r\n    }\r\n\r\n    /**\r\n     * Return reversed string\r\n     * @param str : string\r\n     * Input: .reverse(\"foobar\"); ==> \"raboof\"\r\n     */\r\n    reverse(str: string) {\r\n        return this.chars(str).reverse().join('');\r\n    }\r\n\r\n    /**\r\n     * This method checks whether the string begins with starts at position (default: 0)\r\n     * @param str : string\r\n     * @param starts : string\r\n     * @param position : number\r\n     * Input: startsWith(\"image.gif\", \"image\"); ==> true\r\n     * Input: startsWith(\".vimrc\", \"vim\", 1); ==> true\r\n     */\r\n    startsWith(str: string, starts: string, position: number) {\r\n        starts = '' + starts;\r\n        position = position == null ? 0 : Math.min(this.toPositive(position), str.length);\r\n        return str.lastIndexOf(starts, position) === position;\r\n    }\r\n\r\n    /**\r\n     * This method checks whether the string ends with ends at position (default: string.length).\r\n     * @param str : string\r\n     * @param ends : string\r\n     * @param position : number\r\n     * Input: endsWith(\"image.gif\", \"gif\"); ==> true\r\n     * Input: endsWith(\"image.old.gif\", \"old\", 9); ==> true\r\n     */\r\n    endsWith(str: string, ends: string, position?: number) {\r\n        ends = '' + ends;\r\n        if (typeof position == 'undefined') {\r\n            position = str.length - ends.length;\r\n        } else {\r\n            position = Math.min(this.toPositive(position), str.length) - ends.length;\r\n        }\r\n        return position >= 0 && str.indexOf(ends, position) === position;\r\n    }\r\n\r\n    /**\r\n     * Returns the predecessor to string\r\n     * @param str : string\r\n     * pred(\"b\") ==> \"a\"\r\n     * pred(\"B\") ==> \"A\"\r\n     */\r\n    pred(str: string) {\r\n        return this.adjacent(str, -1);\r\n    }\r\n\r\n    /**\r\n     * Returns the successor to string.\r\n     * @param str : string\r\n     * pred(\"a\") ==> \"b\"\r\n     * pred(\"A\") ==> \"B\"\r\n     */\r\n    succ(str: string) {\r\n        return this.adjacent(str, 1);\r\n    }\r\n\r\n    /**\r\n     * @param str : string\r\n     * titleize(\"my name is thuyet\") ==> \"My Name Is Thuyet\"\r\n     */\r\n    titleize(str: string) {\r\n        return str.toLowerCase().replace(/(?:^|\\s|-)\\S/g, function (c) {\r\n            return c.toUpperCase();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts underscored or dasherized string to a camelized one. Begins with a lower case letter unless it starts with an underscore, dash or an upper case letter.\r\n     * @param str : string\r\n     * @param decapitalize : string \r\n     * camelize(\"moz-transform\") ==> \"mozTransform\"\r\n     * camelize(\"-moz-transform\") ==> \"MozTransform\"\r\n     * camelize(\"_moz_transform\") ==> \"MozTransform\"\r\n     * camelize(\"-moz-transform\", true) ==> \"MozTransform\"\r\n     */\r\n    camelize(str: string, decapitalize: boolean) {\r\n        str = str.trim().replace(/[-_\\s]+(.)?/g, function (match, c) {\r\n            return c ? c.toUpperCase() : '';\r\n        });\r\n\r\n        if (decapitalize === true) {\r\n            return this.decapitalize(str);\r\n        } else {\r\n            return str;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts string to camelized class name. First letter is always upper case\r\n     * @param str : string\r\n     * classify(\"thuyet_le_van\") ==> \"ThuyetLeVan\"\r\n     */\r\n    classify(str: string) {\r\n        return this.capitalize(this.camelize(str.replace(/[\\W_]/g, ' '), false).replace(/\\s/g, ''), false);\r\n    }\r\n\r\n    /**\r\n     * Converts a camelized or dasherized string into an underscored one\r\n     * @param str : string\r\n     * underscored(\"ThuyetLeVan\") ==> \"thuyet_le_van\"\r\n     */\r\n    underscored(str: string) {\r\n        return str.replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Converts a underscored or camelized string into an dasherized one\r\n     * @param str : string\r\n     * underscored(\"ThuyetLeVan\") ==> \"thuyet-le-van\"\r\n     */\r\n    dasherize(str: string) {\r\n        return str.replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Converts an underscored, camelized, or dasherized string into a humanized one. Also removes beginning and ending whitespace, and removes the postfix '_id'.\r\n     * @param str : string\r\n     * humanize(\"  capitalize dash-CamelCase_underscore trim  \") ==> \"Capitalize dash camel case underscore trim\"\r\n     */\r\n    humanize(str: string) {\r\n        return this.capitalize(this.underscored(str).replace(/_id$/, '').replace(/_/g, ' ').trim(), false);\r\n    }\r\n\r\n    toPositive(num: number) {\r\n        return num < 0 ? 0 : (+num || 0);\r\n    }\r\n\r\n    adjacent(str: string, direction: number) {\r\n        if (str.length === 0) {\r\n            return '';\r\n        }\r\n        return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length - 1) + direction);\r\n    }\r\n\r\n    /**\r\n     * Parse string to number. Returns NaN if string can't be parsed to number.\r\n     * @param num : string\r\n     * @param precision : number\r\n     * toNumber(\"2.556\") ==> 3\r\n     * toNumber(\"2.556\", 1) ==> 2.6\r\n     * toNumber(\"999.999\", -1) ==> 990\r\n     */\r\n    toNumber(num: any, precision: number) {\r\n        if (num == null) return 0;\r\n        var factor = Math.pow(10, isFinite(precision) ? precision : 0);\r\n        return Math.round(num * factor) / factor;\r\n    }\r\n\r\n    /**\r\n     * Removes all html tags from string.\r\n     * @param str : string\r\n     * stripTags(\"a <a href=\\\"#\\\">link</a>\") ==> \"a link\"\r\n     * stripTags(\"a <a href=\\\"#\\\">link</a><script>alert(\\\"hello world!\\\")</script>\") ==> \"a linkalert(\"hello world!\")\"\r\n     */\r\n    stripTags(str: string) {\r\n        return str.replace(/<\\/?[^>]+>/g, '');\r\n    }\r\n\r\n    /**\r\n     * Repeats a string count times.\r\n     * @param str : string\r\n     * @param qty : number\r\n     * @param separator : string\r\n     * repeat(\"HEY\", 3) ==> \"HEYHEYHEY\"\r\n     * repeat(\"HEY\", 3, \"HI\") ==> \"HEYHEYHEYHI\"\r\n     */\r\n    repeat(str: string, qty: number, separator: string) {\r\n\r\n        qty = ~~qty;\r\n\r\n        // using faster implementation if separator is not needed;\r\n        if (separator == null) return this.strRepeat(str, qty);\r\n\r\n        // this one is about 300x slower in Google Chrome\r\n        /*eslint no-empty: 0*/\r\n        for (var repeat = []; qty > 0; repeat[--qty] = str) { }\r\n        return repeat.join(separator);\r\n    }\r\n\r\n    strRepeat(str: string, qty: number) {\r\n        if (qty < 1) return '';\r\n        var result = '';\r\n        while (qty > 0) {\r\n            if (qty & 1) result += str;\r\n            qty >>= 1, str += str;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Surround a string with another string.\r\n     * @param str : string\r\n     * @param wrapper : string\r\n     * surround(\"HEY\", \"NAME\") ==> \"NAMEHEYNAME\"\r\n     */\r\n    surround(str: string, wrapper: string) {\r\n        return [wrapper, str, wrapper].join('');\r\n    }\r\n\r\n    /**\r\n     * Quotes a string. quoteChar defaults to \".\r\n     * @param str : string\r\n     * @param quoteChar : string\r\n     * quote(\"DEMO\", '\"') ==> '\"DEMO\"'\r\n     */\r\n    quote(str: string, quoteChar: string) {\r\n        return this.surround(str, quoteChar || '\"');\r\n    }\r\n\r\n    /**\r\n     * Unquotes a string. quoteChar defaults to \".\r\n     * @param str : string\r\n     * @param quoteChar : string\r\n     * unquote('\"DEMO\"') ==> \"DEMO\"\r\n     */\r\n    unquote(str: string, quoteChar: string) {\r\n        quoteChar = quoteChar || '\"';\r\n        if (str[0] === quoteChar && str[str.length - 1] === quoteChar)\r\n            return str.slice(1, str.length - 1);\r\n        else return str;\r\n    }\r\n\r\n    boolMatch(s: string, matchers: any) {\r\n        var i, matcher, down = s.toLowerCase();\r\n        matchers = [].concat(matchers);\r\n        for (i = 0; i < matchers.length; i += 1) {\r\n            matcher = matchers[i];\r\n            if (!matcher) continue;\r\n            if (matcher.test && matcher.test(s)) return true;\r\n            if (matcher.toLowerCase() === down) return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Turn strings that can be commonly considered as booleas to real booleans. Such as \"true\", \"false\", \"1\" and \"0\". This function is case insensitive.\r\n     * @param str : string\r\n     * @param trueValues : []\r\n     * @param falseValues : []\r\n     * toBoolean(\"true\") ==> true\r\n     * toBoolean(\"FALSE\") ==> false\r\n     * toBoolean(\"random\") ==> undefined\r\n     */\r\n    toBoolean(str: string, trueValues = [], falseValues = []) {\r\n        if (typeof str === 'number') str = '' + str;\r\n        if (typeof str !== 'string') return !!str;\r\n        str = str.trim();\r\n        if (this.boolMatch(str, trueValues || ['true', '1'])) return true;\r\n        if (this.boolMatch(str, falseValues || ['false', '0'])) return false;\r\n    }\r\n\r\n    /**\r\n     * @param str : string\r\n     * @param step : number\r\n     * chop(\"whitespace\", 3) ==> [\"whi\", \"tes\", \"pac\", \"e\"]\r\n     */\r\n    chop(str: string, step: number) {\r\n        if (str == null) return [];\r\n        str = String(str);\r\n        step = ~~step;\r\n        return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];\r\n    }\r\n\r\n    /**\r\n     * Removes prefix from start of string.\r\n     * @param str : string\r\n     * @param prefix : string\r\n     * chompLeft('foobar', 'foo') ==> \"bar\"\r\n     * chompLeft('foobar', 'bar') ==> \"foobar\"\r\n     */\r\n    chompLeft(str: string, prefix: string) {\r\n        if (str.indexOf(prefix) === 0) {\r\n            str = str.slice(prefix.length);\r\n            return str;\r\n        } else {\r\n            return str;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes suffix from end of string.\r\n     * @param str : string\r\n     * @param suffix : string\r\n     * chompRight('foobar', 'foo') ==> \"foobar\"\r\n     * chompRight('foobar', 'bar') ==> \"foo\"\r\n     */\r\n    chompRight(str: string, suffix: string) {\r\n        if (this.endsWith(str, suffix)) {\r\n            str = str.slice(0, str.length - suffix.length);\r\n            return str;\r\n        } else {\r\n            return str;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts all adjacent whitespace characters to a single space.\r\n     * @param str :string\r\n     * Input: '  String   \\t libraries are   \\n\\n\\t fun\\n!  ';\r\n     * Output: 'String libraries are fun !'\r\n     */\r\n    collapseWhitespace(str: string) {\r\n        str = str.replace(/[\\s\\xa0]+/g, ' ').replace(/^\\s+|\\s+$/g, '');\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * Ensures string starts with prefix.\r\n     * @param str : string\r\n     * @param prefix : string\r\n     * ensureLeft('subdir', '/') ==> '/subdir'\r\n     */\r\n    ensureLeft(str: string, prefix: string) {\r\n        if (str.indexOf(prefix) === 0) {\r\n            return str;\r\n        } else {\r\n            return prefix + str;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ensures string ends with suffix.\r\n     * @param str : string\r\n     * @param suffix : string\r\n     * ensureRight('dir', '/') ==> 'dir'\r\n     */\r\n    ensureRight(str: string, suffix: string) {\r\n        if (str.indexOf(suffix) === 0) {\r\n            return str;\r\n        } else {\r\n            return str + suffix;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return true if the string contains only letters.\r\n     * @param str string\r\n     * isAlpha(\"afaf\") ==> true\r\n     * isAlpha(\"fdafaf3\") ==> false\r\n     */\r\n    isAlpha(str: string) {\r\n        return !/[^a-z\\xDF-\\xFF]|^$/.test(str.toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * Return true if the string contains only letters and numbers\r\n     * @param str string\r\n     * isAlphaNumeric(\"afaf35353afaf\") ==> true\r\n     * isAlphaNumeric(\"FFFF99fff\") ==> true\r\n     * isAlphaNumeric(\"aaff..\") ==> false\r\n     */\r\n    isAlphaNumeric(str: string) {\r\n        return !/[^0-9a-z\\xDF-\\xFF]/.test(str.toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * Return true if the character or string is lowercase\r\n     * @param str : string\r\n     * isLower(\"a\") ==> true\r\n     * isLower(\"z\") ==> true\r\n     * isLower(\"B\") ==> false\r\n     * isLower(\"hithuyet\") ==> true\r\n     * isLower(\"hi thuyet\") ==> false\r\n     */\r\n    isLower(str: string) {\r\n        return this.isAlpha(str) && str.toLowerCase() === str;\r\n    }\r\n\r\n    /**\r\n     * Return true if the string only contains digits\r\n     * @param str : string\r\n     * isNumeric(\"3\") ==> true\r\n     * isNumeric(\"000992424242\") ==> true\r\n     * isNumeric(\"34.22\") ==> false\r\n     * isNumeric(\"-22.33\") ==> false\r\n     * isNumeric(\"NaN\") ==> false\r\n     * isNumeric(\"THUYET\") ==> false\r\n     */\r\n    isNumeric(str: string) {\r\n        return !/[^0-9]/.test(str);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the character or string is uppercase\r\n     * @param str : string\r\n     * isUpper(\"HelLO\") ==> true\r\n     * isUpper(\"HI THUYET\") ==> false\r\n     * isUpper(\"HITHUYET\") ==> true\r\n     * isUpper(\"B\") ==> true\r\n     * isUpper(\"a\") ==> false\r\n     * isUpper(\"z\") ==> false\r\n     */\r\n    isUpper(str: string) {\r\n        return this.isAlpha(str) && str.toUpperCase() === str;\r\n    }\r\n\r\n    /**\r\n     * Return the substring denoted by n positive left-most characters.\r\n     * @param str : string\r\n     * @param num : number\r\n     * left(\"My name Thuyet\", 2) ==> \"My\"\r\n     * left(\"My name Thuyet\", 0) ==> \"\"\r\n     */\r\n    left(str: string, num: number) {\r\n        if (num >= 0) {\r\n            return str.substr(0, num);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the substring denoted by n positive right-most characters.\r\n     * @param str : string\r\n     * @param num : number\r\n     * right(\"My name THUYET\", 2) ==> \"ET\"\r\n     * right(\"My name THUYET\", 0) ==> \"\"\r\n     */\r\n    right(str: string, num: number) {\r\n        if (num >= 0) {\r\n            return str.substr(str.length - num, num);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a string repeated n times.\r\n     * @param str : string\r\n     * @param num : number\r\n     * times(\"*\", 3) ==> \"***\"\r\n     */\r\n    times(str: string, num: number) {\r\n        return new Array(num + 1).join(str);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}